// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: taskmaster.proto

package taskmaster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Taskmaster_Update_FullMethodName = "/taskmaster.Taskmaster/Update"
	Taskmaster_Query_FullMethodName  = "/taskmaster.Taskmaster/Query"
	Taskmaster_Debug_FullMethodName  = "/taskmaster.Taskmaster/Debug"
)

// TaskmasterClient is the client API for Taskmaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskmasterClient interface {
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
}

type taskmasterClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskmasterClient(cc grpc.ClientConnInterface) TaskmasterClient {
	return &taskmasterClient{cc}
}

func (c *taskmasterClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Taskmaster_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, Taskmaster_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterClient) Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	out := new(DebugResponse)
	err := c.cc.Invoke(ctx, Taskmaster_Debug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskmasterServer is the server API for Taskmaster service.
// All implementations must embed UnimplementedTaskmasterServer
// for forward compatibility
type TaskmasterServer interface {
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Debug(context.Context, *DebugRequest) (*DebugResponse, error)
	mustEmbedUnimplementedTaskmasterServer()
}

// UnimplementedTaskmasterServer must be embedded to have forward compatible implementations.
type UnimplementedTaskmasterServer struct {
}

func (UnimplementedTaskmasterServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTaskmasterServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedTaskmasterServer) Debug(context.Context, *DebugRequest) (*DebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedTaskmasterServer) mustEmbedUnimplementedTaskmasterServer() {}

// UnsafeTaskmasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskmasterServer will
// result in compilation errors.
type UnsafeTaskmasterServer interface {
	mustEmbedUnimplementedTaskmasterServer()
}

func RegisterTaskmasterServer(s grpc.ServiceRegistrar, srv TaskmasterServer) {
	s.RegisterService(&Taskmaster_ServiceDesc, srv)
}

func _Taskmaster_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskmaster_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskmaster_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Taskmaster_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Taskmaster_Debug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServer).Debug(ctx, req.(*DebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Taskmaster_ServiceDesc is the grpc.ServiceDesc for Taskmaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Taskmaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskmaster.Taskmaster",
	HandlerType: (*TaskmasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Taskmaster_Update_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Taskmaster_Query_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _Taskmaster_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskmaster.proto",
}
